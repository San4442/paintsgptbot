import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from services.gpt import analyze_with_gpt
from services.yandex_client import get_links
import logging

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text

    result = await analyze_with_gpt(query)
    if not result or not result.get("is_painting"):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã.")
        return

    details = result["details"]
    search_terms = [
        details.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", ""),
        details.get("–∞–≤—Ç–æ—Ä", ""),
        details.get("—Å—Ç–∏–ª—å", ""),
        "–∫–∞—Ä—Ç–∏–Ω–∞",
        *details.get("–∫–ª—é—á–µ–≤—ã–µ_—ç–ª–µ–º–µ–Ω—Ç—ã", [])
    ]
    search_query = " ".join(filter(None, search_terms))

    try:
        loop = asyncio.get_running_loop()
        links = await loop.run_in_executor(None, get_links, search_query)
        text = (
            f"üé® –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {details.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')}\n"
            f"–ê–≤—Ç–æ—Ä: {details.get('–∞–≤—Ç–æ—Ä')}\n"
            f"–°—Ç–∏–ª—å: {details.get('—Å—Ç–∏–ª—å')}\n"
            "\nüîó –°—Å—ã–ª–∫–∏:\n" + "\n".join(f"{i+1}. {link}" for i, link in enumerate(links))
        )
        await update.message.reply_text(text)
    except Exception as e:
        logging.error(f"Search error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
