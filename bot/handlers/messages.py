import asyncio
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes
from handlers.commands import ART_BOT_MENU, image_search
from services.image_search import search_images
from services.gpt import analyze_with_gpt
from services.yandex_client import get_links
import logging
from telegram.constants import ParseMode

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üé® –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω—ã":
        cancel_keyboard = ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        await update.message.reply_text(
            "üñã –û–ø–∏—à–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:",
            reply_markup=cancel_keyboard
        )
        context.user_data['expecting_description'] = True
    
    elif text == "üñº –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π":
        await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=ART_BOT_MENU)
        context.user_data['expecting_image_query'] = True
    
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "1. <b>–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω—ã</b> - –æ–ø–∏—à–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "2. <b>–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b> - –Ω–∞–π–¥–∏—Ç–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
            "3. <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b> - —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ä–∞–±–æ—Ç—ã\n\n"
            "<b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã</b>, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ—ë –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å!\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            "- '–ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å –í–∞–Ω –ì–æ–≥–∞'\n"
            "- '–î–µ–≤–æ—á–∫–∞ —Å –ø–µ—Ä—Å–∏–∫–∞–º–∏'\n"
            "- '–°—É–ø—Ä–µ–º–∞—Ç–∏–∑–º –ú–∞–ª–µ–≤–∏—á–∞'",
            parse_mode=ParseMode.HTML,
            reply_markup=ART_BOT_MENU
        )
    
    elif text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        await update.message.reply_text("üìå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", reply_markup=ART_BOT_MENU)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ART_BOT_MENU
        )
        context.user_data.pop('expecting_description', None)
        context.user_data.pop('expecting_image_query', None)
        return

    if context.user_data.get('expecting_description'):
        context.user_data.pop('expecting_description', None)
        await analyze_art(update, context)
        return
        
    if context.user_data.get('expecting_image_query'):
        context.user_data.pop('expecting_image_query', None)
        context.args = [text]
        await image_search(update, context)
        return
        
    menu_options = ["üé® –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω—ã", "üñº –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]
    if text in menu_options:
        await handle_menu(update, context)
    else:
        await analyze_art(update, context)

async def analyze_art(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text

    await update.message.reply_text(
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã...",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    await asyncio.sleep(0.5)

    await update.message.reply_text(
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∏–Ω–µ...",
        reply_markup=ART_BOT_MENU
    )

    result = await analyze_with_gpt(query)
    if not result or not result.get("is_painting"):
        await update.message.reply_text(
            "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã.",
            reply_markup=ART_BOT_MENU  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        )
        return

    details = result["details"]
    search_terms = [
        details.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", ""),
        details.get("–∞–≤—Ç–æ—Ä", ""),
        details.get("—Å—Ç–∏–ª—å", ""),
        "–∫–∞—Ä—Ç–∏–Ω–∞",
        *details.get("–∫–ª—é—á–µ–≤—ã–µ_—ç–ª–µ–º–µ–Ω—Ç—ã", [])
    ]
    search_query = " ".join(filter(None, search_terms))

    try:
        image_urls = await search_images(search_query, n=1)
        
        loop = asyncio.get_running_loop()
        links = await loop.run_in_executor(None, get_links, search_query, 5)

        formatted_links = "\n".join(
            f"{i+1}. <a href='{item['url']}'>{item['title']}</a>" 
            for i, item in enumerate(links))

        caption = (
            f"üé® <b>{details.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {details.get('–∞–≤—Ç–æ—Ä', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üèõ –°—Ç–∏–ª—å: {details.get('—Å—Ç–∏–ª—å', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"üîó –°—Å—ã–ª–∫–∏:\n{formatted_links}"
        )

        if image_urls:
            await update.message.reply_photo(
                image_urls[0],
                caption=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=ART_BOT_MENU
            )
        else:
            await update.message.reply_text(
                caption,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
                reply_markup=ART_BOT_MENU
            )
    except Exception as e:
        logging.error(f"Search error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–∏–Ω—ã.",
            reply_markup=ART_BOT_MENU  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        )
