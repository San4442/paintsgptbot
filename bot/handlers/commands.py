from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import ContextTypes
from services.image_search import search_images
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CallbackQueryHandler
from services.yandex_client import get_links
import asyncio
import logging

PHOTOS_PER_PAGE = 3

ART_BOT_MENU = ReplyKeyboardMarkup(
    [
        ["üé® –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω—ã", "üñº –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]
    ],
    resize_keyboard=True,
    is_persistent=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∏—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ART_BOT_MENU
    )

async def image_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args) if context.args else None
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /image")
        return
    
    await update.message.reply_text("üîé –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        loop = asyncio.get_running_loop()
        links = await loop.run_in_executor(None, get_links, query, 15)
        if not links:
            await update.message.reply_text("–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
    except Exception as e:
        logging.error(f"Image search error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return
    
    context.user_data['images'] = links
    context.user_data['page'] = 0
    await send_image_page(update, context)

async def send_image_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    links = context.user_data.get('images', [])
    page = context.user_data.get('page', 0)
    
    start = page * PHOTOS_PER_PAGE
    end = start + PHOTOS_PER_PAGE
    photos = links[start:end]

    if not photos:
        await update.message.reply_text("–ë–æ–ª—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç.")
        return

    media_group = [InputMediaPhoto(media=item['url']) for item in photos]

    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='prev'),
            InlineKeyboardButton("‚û°Ô∏è", callback_data='next')
        ],
        [
            InlineKeyboardButton("‚úÖ –≠—Ç–æ —Ç–µ —Ñ–æ—Ç–æ", callback_data='confirm'),
            InlineKeyboardButton("‚ùå –ù–µ —Ç–æ, –∏—â–∏ –µ—â—ë", callback_data='reject')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text_links = "\n".join(
        f"[{item['title']}]({item['url']})"
        for item in photos
    )

    if update.callback_query:
        try:
            await update.callback_query.message.edit_media(media_group[0], reply_markup=reply_markup)
            if len(media_group) > 1:
                await update.callback_query.message.reply_media_group(media_group[1:])
            await update.callback_query.message.reply_text(
                f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Å—ã–ª–∫–∏:\n{text_links}",
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
        except Exception as e:
            logging.error(f"Error editing media: {e}")
    else:
        await update.message.reply_media_group(media_group)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.\n\n"
            f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Å—ã–ª–∫–∏:\n{text_links}",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if 'images' not in context.user_data:
        await query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /image")
        return
    
    if query.data == 'next':
        max_page = (len(context.user_data['images']) - 1) // PHOTOS_PER_PAGE
        if context.user_data['page'] < max_page:
            context.user_data['page'] += 1
            await send_image_page(update, context)
        else:
            await query.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=True)

    elif query.data == 'prev':
        if context.user_data['page'] > 0:
            context.user_data['page'] -= 1
            await send_image_page(update, context)
        else:
            await query.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=True)

    elif query.data == 'confirm':
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        context.user_data.clear()

    elif query.data == 'reject':
        await query.edit_message_text("–ò—â—É –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        try:
            context.user_data.clear()
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /image <–æ–ø–∏—Å–∞–Ω–∏–µ>")
        except Exception as e:
            logging.error(f"Error on reject: {e}")